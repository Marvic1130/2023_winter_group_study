# 알고리즘 정리
# 서로 인접한 두 원소의 대소를 비교하고, 조건에 맞지 않다면 자리를 교환하며 정렬하는 알고리즘
# 유레 : 두 원소의 정렬과정에서 원소의 이동이 거품처럼 올라오는 모습을 보이기 때문에 Bubble이라고 불림

# Process(Ascending)
"""
1. 1회전에 0번 원소와 1번 원소를 비교, 1번원소와 2번원소를, 2번원소와 3번원소를... 
    이런식으로 마지막-1번째 원소까지 비교하면서 조건에 맞지 않다면 원소를 서로 교환한다
2. 1회전을 수행하고 나면 가장 큰 수가 마지막 원소가 되고 회전을 수행할때마다 수행해야할 반복 수가 줄어든다.
"""

# code

# 리스트자료형의 변수 생성
Narr = [9,4,6,2,1,5,3,7,8]

# 버블정렬을 수행할 함수정의
def Bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:   
                arr[j],arr[j+1] = arr[j+1],arr[j]
    

# 출력결과
print(f"정렬 전 : {Narr}")
Bubble_sort(Narr)
print(f"정렬 후 : {Narr}")



# 장점
"""
1. 구현이 매우 간단하고 직관적이다.
2. 정렬하고자 하는 배열안에서 교환하는 방식으로, 다른 메모리 공간이 필요하지 않다. => 제자리 정렬(in-place sorting)
3. 안정 정렬(Stable sorting)
"""

# 단점
"""
1. 시간 복잡도가 최악,최선,평균 모두 O(n^2)으로 굉장히 비효율 적이다.
2. 정렬 돼있지 않은 원소가 정렬 됐을때의 자리로 가기 위해, 교환 연산(swap)이 많이 일어난다.
"""